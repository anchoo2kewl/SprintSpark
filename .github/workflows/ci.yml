name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  GO_VERSION: "1.24"
  NODE_VERSION: "20"

jobs:
  # API Testing Job
  api-test:
    name: API Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.23", "1.24"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache-dependency-path: api/go.sum

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('api/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
            ${{ runner.os }}-go-

      - name: Download dependencies
        working-directory: ./api
        run: go mod download

      - name: Run linters
        working-directory: ./api
        run: |
          go fmt ./...
          go vet ./...

      - name: Run unit tests with coverage
        working-directory: ./api
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out

      - name: Run E2E tests
        working-directory: ./api
        run: go test -v ./internal/e2e

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./api/coverage.out
          flags: api
          name: api-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-test-results-go-${{ matrix.go-version }}
          path: |
            api/coverage.out
          retention-days: 30

  # Web Testing Job
  web-test:
    name: Web Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["18", "20"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        working-directory: ./web
        run: npm ci

      - name: Run linter
        working-directory: ./web
        run: npm run lint

      - name: Run type check
        working-directory: ./web
        run: npx tsc --noEmit

      - name: Build application
        working-directory: ./web
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build-node-${{ matrix.node-version }}
          path: web/dist
          retention-days: 7

  # E2E Testing Job with Playwright
  e2e-test:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: [api-test, web-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: api/go.sum

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install API dependencies
        working-directory: ./api
        run: go mod download

      - name: Install Web dependencies
        working-directory: ./web
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./web
        run: npx playwright install --with-deps chromium

      - name: Start API server
        working-directory: ./api
        run: |
          go run cmd/api/main.go &
          echo $! > /tmp/api.pid
          # Wait for server to be ready
          for i in {1..30}; do
            if curl -f http://localhost:8080/healthz > /dev/null 2>&1; then
              echo "API server is ready"
              break
            fi
            echo "Waiting for API server... ($i/30)"
            sleep 2
          done

      - name: Run Playwright tests
        working-directory: ./web
        env:
          CI: true
        run: npx playwright test

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: web/playwright-report
          retention-days: 30

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            web/test-results
            web/playwright-report
          retention-days: 30

      - name: Stop API server
        if: always()
        run: |
          if [ -f /tmp/api.pid ]; then
            kill $(cat /tmp/api.pid) || true
          fi

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Go Security Check
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out gosec-results.sarif ./api/...'

      - name: Upload GoSec results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'gosec-results.sarif'

  # Dependency Review (PRs only)
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  # Build Check
  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [api-test, web-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: api/go.sum

      - name: Build API binary
        working-directory: ./api
        run: |
          go build -v -o bin/sprintspark cmd/api/main.go
          ./bin/sprintspark --version || echo "Binary built successfully"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install Web dependencies
        working-directory: ./web
        run: npm ci

      - name: Build Web application
        working-directory: ./web
        run: npm run build

      - name: Check build size
        working-directory: ./web
        run: |
          echo "Build output:"
          ls -lh dist/
          du -sh dist/

  # All tests passed
  all-tests-passed:
    name: All Tests Passed
    runs-on: ubuntu-latest
    needs: [api-test, web-test, e2e-test, security-scan, build]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.api-test.result }}" != "success" ]; then
            echo "API tests failed"
            exit 1
          fi
          if [ "${{ needs.web-test.result }}" != "success" ]; then
            echo "Web tests failed"
            exit 1
          fi
          if [ "${{ needs.e2e-test.result }}" != "success" ]; then
            echo "E2E tests failed"
            exit 1
          fi
          if [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "Security scan failed"
            exit 1
          fi
          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "Build failed"
            exit 1
          fi
          echo "All tests passed!"
