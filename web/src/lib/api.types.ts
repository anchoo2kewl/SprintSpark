/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * API Root
         * @description Returns basic API information
         */
        get: operations["getRoot"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/healthz": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Check API and database health
         */
        get: operations["healthCheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openapi": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get OpenAPI Specification
         * @description Returns the OpenAPI specification in YAML format
         */
        get: operations["getOpenAPISpec"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sign Up
         * @description Create a new user account
         */
        post: operations["signup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Log In
         * @description Authenticate with email and password
         */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User
         * @description Get the profile of the currently authenticated user
         */
        get: operations["getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        SignupRequest: {
            /**
             * Format: email
             * @description User's email address (must be unique)
             * @example user@example.com
             */
            email: string;
            /**
             * Format: password
             * @description User's password (minimum 8 characters)
             * @example securepassword123
             */
            password: string;
        };
        LoginRequest: {
            /**
             * Format: email
             * @description User's email address
             * @example user@example.com
             */
            email: string;
            /**
             * Format: password
             * @description User's password
             * @example securepassword123
             */
            password: string;
        };
        AuthResponse: {
            /**
             * @description JWT authentication token
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            token?: string;
            user?: components["schemas"]["User"];
        };
        User: {
            /**
             * Format: int64
             * @description Unique user identifier
             * @example 1
             */
            id?: number;
            /**
             * Format: email
             * @description User's email address
             * @example user@example.com
             */
            email?: string;
            /**
             * Format: date-time
             * @description Account creation timestamp
             * @example 2025-10-17T22:59:13Z
             */
            created_at?: string;
        };
        /** @description Project entity (coming soon) */
        Project: {
            /**
             * Format: int64
             * @example 1
             */
            id?: number;
            /**
             * Format: int64
             * @example 1
             */
            owner_id?: number;
            /** @example My Project */
            name?: string;
            /** @example Project description */
            description?: string | null;
            /**
             * Format: date-time
             * @example 2025-10-17T22:59:13Z
             */
            created_at?: string;
            /**
             * Format: date-time
             * @example 2025-10-17T22:59:13Z
             */
            updated_at?: string;
        };
        /** @description Task entity (coming soon) */
        Task: {
            /**
             * Format: int64
             * @example 1
             */
            id?: number;
            /**
             * Format: int64
             * @example 1
             */
            project_id?: number;
            /** @example Implement feature */
            title?: string;
            /** @example Task description */
            description?: string | null;
            /**
             * @example todo
             * @enum {string}
             */
            status?: "todo" | "in_progress" | "done";
            /**
             * Format: date-time
             * @example 2025-10-17T22:59:13Z
             */
            created_at?: string;
            /**
             * Format: date-time
             * @example 2025-10-17T22:59:13Z
             */
            updated_at?: string;
        };
        Error: {
            /**
             * @description Human-readable error message
             * @example invalid request
             */
            error: string;
            /**
             * @description Machine-readable error code
             * @example invalid_request
             * @enum {string}
             */
            code?: "invalid_request" | "validation_error" | "unauthorized" | "not_found" | "email_exists" | "invalid_credentials" | "internal_error";
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getRoot: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example SprintSpark API */
                        message?: string;
                        /** @example 0.1.0 */
                        version?: string;
                    };
                };
            };
        };
    };
    healthCheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service is healthy */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example ok */
                        status?: string;
                        /** @example connected */
                        database?: string;
                    };
                };
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /**
                     * @example {
                     *       "error": "database unavailable",
                     *       "code": "internal_error"
                     *     }
                     */
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getOpenAPISpec: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OpenAPI specification */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/yaml": string;
                };
            };
        };
    };
    signup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignupRequest"];
            };
        };
        responses: {
            /** @description User created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Email already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /**
                     * @example {
                     *       "error": "email already exists",
                     *       "code": "email_exists"
                     *     }
                     */
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Login successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Invalid credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /**
                     * @example {
                     *       "error": "invalid email or password",
                     *       "code": "invalid_credentials"
                     *     }
                     */
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
}
