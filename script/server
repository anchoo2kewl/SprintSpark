#!/bin/bash

# SprintSpark Production Server Management Script
# Manages deployment, testing, health checks, and operations

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Remote production settings
REMOTE_SERVER="ubuntu@biswas.me"
REMOTE_DEPLOY_PATH="/home/ubuntu/projects/sprintspark"
REMOTE_DOMAIN="sprintspark.biswas.me"

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_header() {
    echo -e "${BLUE}=== $1 ===${NC}"
}

# Function to show help
show_help() {
    echo -e "${CYAN}SprintSpark Server Management Script${NC}"
    echo ""
    echo "Usage: $0 <command> [options]"
    echo ""
    echo -e "${YELLOW}Production Commands:${NC}"
    echo "  deploy               Deploy to production (no pull, webhook handles that)"
    echo "  restart              Restart production services"
    echo "  stop                 Stop production services"
    echo "  start                Start production services"
    echo "  status               Show production service status"
    echo "  logs [api|web]       Show production logs"
    echo "  health               Check production health"
    echo ""
    echo -e "${YELLOW}Test Commands:${NC}"
    echo "  test                 Run all tests (backend + frontend + coverage)"
    echo "  test-api             Run Go API tests"
    echo "  test-web             Run frontend tests"
    echo "  test-e2e             Run Playwright E2E tests"
    echo ""
    echo -e "${YELLOW}Utility Commands:${NC}"
    echo "  validate-openapi     Validate OpenAPI spec"
    echo "  db-query <query>     Execute SQL on production database"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo "  $0 deploy           # Restart services on production"
    echo "  $0 test             # Run all tests and show summary"
    echo "  $0 health           # Check API health"
    echo "  $0 db-query \"SELECT * FROM users LIMIT 5;\" # Query production DB"
}

# Deploy to production (restart services, webhook handles git pull)
deploy_to_production() {
    print_header "Deploying to Production"

    print_status "Testing SSH connection..."
    if ! ssh -o ConnectTimeout=10 "$REMOTE_SERVER" "echo 'SSH connection successful'" >/dev/null 2>&1; then
        print_error "Cannot connect to $REMOTE_SERVER"
        return 1
    fi

    print_status "Restarting Docker services on production..."
    ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose restart"

    sleep 5

    print_status "Checking service health..."
    if curl -f -s "https://$REMOTE_DOMAIN/api/health" >/dev/null 2>&1; then
        print_success "✅ Deployment successful! API is healthy at https://$REMOTE_DOMAIN"
    else
        print_error "❌ Deployment verification failed - API not responding"
        return 1
    fi
}

# Restart production services
restart_services() {
    print_header "Restarting Production Services"

    ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose restart"

    print_success "Services restarted"
    sleep 3
    show_status
}

# Stop production services
stop_services() {
    print_header "Stopping Production Services"

    ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose stop"

    print_success "Services stopped"
}

# Start production services
start_services() {
    print_header "Starting Production Services"

    ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose up -d"

    print_success "Services started"
    sleep 3
    show_status
}

# Show service status
show_status() {
    print_header "Production Service Status"

    ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose ps"
}

# Show logs
show_logs() {
    local service="${1:-api}"

    print_header "Production Logs: $service"

    case "$service" in
        api)
            ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose logs --tail=50 api"
            ;;
        web)
            ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose logs --tail=50 web"
            ;;
        *)
            ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose logs --tail=50"
            ;;
    esac
}

# Check health
check_health() {
    print_header "Health Check"

    # Check API
    print_status "Checking API health..."
    if curl -f -s "https://$REMOTE_DOMAIN/api/health" | jq . >/dev/null 2>&1; then
        echo -e "${GREEN}✓ API${NC} - Healthy (https://$REMOTE_DOMAIN/api/health)"
    else
        echo -e "${RED}✗ API${NC} - Not responding"
    fi

    # Check web
    print_status "Checking web UI..."
    if curl -f -s -I "https://$REMOTE_DOMAIN/" | head -1 | grep -q "200\|301\|302"; then
        echo -e "${GREEN}✓ Web UI${NC} - Healthy (https://$REMOTE_DOMAIN/)"
    else
        echo -e "${RED}✗ Web UI${NC} - Not responding"
    fi

    # Check database via SSH
    print_status "Checking database..."
    if ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose exec -T api sh -c 'wget -q -O- http://localhost:8080/api/health'" | grep -q "ok"; then
        echo -e "${GREEN}✓ Database${NC} - Accessible from API"
    else
        echo -e "${YELLOW}⚠ Database${NC} - Unable to verify"
    fi
}

# Run API tests
test_api() {
    print_header "Running API Tests"

    cd api
    go test -v -cover ./... | tee /tmp/sprintspark-api-test.log
    local exit_code=${PIPESTATUS[0]}
    cd ..

    if [ $exit_code -eq 0 ]; then
        print_success "API tests passed"
    else
        print_error "API tests failed"
        return 1
    fi
}

# Run frontend tests
test_web() {
    print_header "Running Frontend Tests"

    cd web
    npm test 2>&1 | tee /tmp/sprintspark-web-test.log || {
        print_warning "Frontend tests not configured or failed"
        cd ..
        return 0
    }
    cd ..

    print_success "Frontend tests passed"
}

# Run E2E tests
test_e2e() {
    print_header "Running Playwright E2E Tests"

    cd web
    npx playwright test 2>&1 | tee /tmp/sprintspark-e2e-test.log
    local exit_code=${PIPESTATUS[0]}
    cd ..

    if [ $exit_code -eq 0 ]; then
        print_success "E2E tests passed"
    else
        print_error "E2E tests failed"
        return 1
    fi
}

# Run all tests and show summary
run_all_tests() {
    print_header "Running All Tests"

    local api_result=0
    local web_result=0
    local e2e_result=0

    # Run API tests
    test_api || api_result=1
    echo ""

    # Run web tests
    test_web || web_result=1
    echo ""

    # Run E2E tests
    test_e2e || e2e_result=1
    echo ""

    # Show coverage
    print_header "Test Coverage"

    if [ -f /tmp/sprintspark-api-test.log ]; then
        echo -e "${CYAN}API Coverage:${NC}"
        grep "coverage:" /tmp/sprintspark-api-test.log | tail -1 || echo "  No coverage data"
    fi

    # Summary
    print_header "Test Summary"

    if [ $api_result -eq 0 ]; then
        echo -e "${GREEN}✅ API Tests${NC} - Passed"
    else
        echo -e "${RED}❌ API Tests${NC} - Failed"
    fi

    if [ $web_result -eq 0 ]; then
        echo -e "${GREEN}✅ Frontend Tests${NC} - Passed"
    else
        echo -e "${YELLOW}⚠️  Frontend Tests${NC} - Skipped or Failed"
    fi

    if [ $e2e_result -eq 0 ]; then
        echo -e "${GREEN}✅ E2E Tests${NC} - Passed"
    else
        echo -e "${RED}❌ E2E Tests${NC} - Failed"
    fi

    if [ $api_result -eq 0 ] && [ $e2e_result -eq 0 ]; then
        echo ""
        print_success "✅ All critical tests passed!"
        return 0
    else
        echo ""
        print_error "❌ Some tests failed"
        return 1
    fi
}

# Validate OpenAPI spec
validate_openapi() {
    print_header "Validating OpenAPI Specification"

    if ! command -v openapi-generator-cli >/dev/null 2>&1; then
        print_warning "openapi-generator-cli not found, using simple validation"

        if [ -f api/openapi.yaml ]; then
            if grep -q "openapi: 3" api/openapi.yaml; then
                print_success "OpenAPI spec appears valid"
            else
                print_error "OpenAPI spec may be invalid"
                return 1
            fi
        else
            print_error "OpenAPI spec not found at api/openapi.yaml"
            return 1
        fi
    else
        openapi-generator-cli validate -i api/openapi.yaml
    fi
}

# Execute database query on production
execute_db_query() {
    local query="$1"

    if [ -z "$query" ]; then
        print_error "Usage: $0 db-query \"SQL_QUERY\""
        return 1
    fi

    print_header "Production Database Query"
    echo -e "${CYAN}Server:${NC} $REMOTE_SERVER"
    echo -e "${CYAN}Query:${NC} $query"
    echo ""

    # Verify SSH connectivity
    if ! ssh -o ConnectTimeout=10 "$REMOTE_SERVER" "echo ok" >/dev/null 2>&1; then
        print_error "Cannot connect to $REMOTE_SERVER"
        return 1
    fi

    # Execute query via docker exec
    ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose exec -T api sh -c 'sqlite3 /data/sprintspark.db \"$query\"'"
}

# Main command handler
case ${1:-help} in
    deploy)
        deploy_to_production
        ;;
    restart)
        restart_services
        ;;
    stop)
        stop_services
        ;;
    start)
        start_services
        ;;
    status)
        show_status
        ;;
    logs)
        show_logs "$2"
        ;;
    health)
        check_health
        ;;
    test)
        run_all_tests
        ;;
    test-api)
        test_api
        ;;
    test-web)
        test_web
        ;;
    test-e2e)
        test_e2e
        ;;
    validate-openapi)
        validate_openapi
        ;;
    db-query)
        execute_db_query "$2"
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        print_error "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac
