#!/bin/bash

# SprintSpark Production Server Management Script
# Manages deployment, testing, health checks, and operations

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Remote production settings
REMOTE_SERVER="ubuntu@biswas.me"
REMOTE_DEPLOY_PATH="/home/ubuntu/projects/sprintspark"
REMOTE_DOMAIN="sprintspark.biswas.me"

# Local development settings
LOCAL_WEB_PORT=8084
LOCAL_API_PORT=8083

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_header() {
    echo -e "${BLUE}=== $1 ===${NC}"
}

# Function to show help
show_help() {
    echo -e "${CYAN}SprintSpark Server Management Script${NC}"
    echo ""
    echo "Usage: $0 <command> [options]"
    echo ""
    echo -e "${YELLOW}Local Development Commands:${NC}"
    echo "  local:start          Start local Docker services (http://localhost:$LOCAL_WEB_PORT)"
    echo "  local:stop           Stop local Docker services"
    echo "  local:restart        Restart local Docker services"
    echo "  local:status         Show local service status"
    echo "  local:logs [service] Show local logs"
    echo "  local:clean          Stop and remove all local containers/volumes"
    echo ""
    echo -e "${YELLOW}Production Commands:${NC}"
    echo "  deploy [\"message\"]   Commit changes, push to GitHub, wait for webhook deploy"
    echo "  restart              Restart production services"
    echo "  stop                 Stop production services"
    echo "  start                Start production services"
    echo "  status               Show production service status"
    echo "  logs [api|web]       Show production logs"
    echo "  health               Check production health"
    echo ""
    echo -e "${YELLOW}Test Commands:${NC}"
    echo "  test                 Run all tests (backend + frontend + coverage)"
    echo "  test-api             Run Go API tests"
    echo "  test-web             Run frontend tests"
    echo "  test-e2e             Run Playwright E2E tests"
    echo ""
    echo -e "${YELLOW}Admin Commands:${NC}"
    echo "  admin create <email> Create admin user (local or remote)"
    echo "  admin list           List all admins (local or remote)"
    echo "  admin revoke <email> Revoke admin privileges (local or remote)"
    echo "  remote admin ...     Execute admin command on remote server"
    echo "  local admin ...      Execute admin command on local database"
    echo ""
    echo -e "${YELLOW}Utility Commands:${NC}"
    echo "  validate-openapi     Validate OpenAPI spec"
    echo "  db-query <query>     Execute SQL on production database"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo "  $0 local:start                               # Start local development server"
    echo "  $0 local admin list                          # List all local admin users"
    echo "  $0 local admin create user@example.com       # Promote local user to admin"
    echo "  $0 local admin revoke user@example.com       # Remove admin privileges locally"
    echo ""
    echo "  $0 admin list                                # List all remote admin users"
    echo "  $0 admin create user@example.com             # Promote remote user to admin"
    echo "  $0 deploy                                    # Deploy with default message"
    echo "  $0 deploy \"fix: resolve login bug\"          # Deploy with custom message"
    echo "  $0 test                                      # Run all tests and show summary"
    echo "  $0 health                                    # Check API health"
    echo "  $0 db-query \"SELECT * FROM users LIMIT 5;\"  # Query production DB"
}

# Deploy to production (commit, push, wait for webhook, verify)
deploy_to_production() {
    local commit_message="${1:-Deploy: automated deployment}"

    print_header "Deploying to Production"

    # Check for uncommitted changes
    if [ -n "$(git status --porcelain)" ]; then
        print_status "Uncommitted changes detected, committing..."
        git add -A
        git commit -m "$commit_message

🤖 Generated with [Claude Code](https://claude.com/claude-code)

Co-Authored-By: Claude <noreply@anthropic.com>" || {
            print_error "Failed to commit changes"
            return 1
        }
    else
        print_status "No uncommitted changes found"
    fi

    # Push to remote
    print_status "Pushing to GitHub..."
    git push origin main || {
        print_error "Failed to push to GitHub"
        return 1
    }

    print_success "Code pushed to GitHub"
    print_status "Waiting for webhook to deploy (15 seconds)..."
    sleep 15

    # Test SSH connection
    print_status "Testing SSH connection to production..."
    if ! ssh -o ConnectTimeout=10 "$REMOTE_SERVER" "echo 'SSH connection successful'" >/dev/null 2>&1; then
        print_error "Cannot connect to $REMOTE_SERVER"
        return 1
    fi

    # Check if containers are running
    print_status "Checking service status..."
    local containers_running=$(ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose ps --services --filter 'status=running' | wc -l")

    if [ "$containers_running" -lt 2 ]; then
        print_warning "Some containers may not be running, checking logs..."
        ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose ps"
    fi

    # Verify health
    print_status "Verifying deployment..."
    local max_attempts=10
    local attempt=1

    while [ $attempt -le $max_attempts ]; do
        if curl -f -s "https://$REMOTE_DOMAIN/api/health" >/dev/null 2>&1; then
            print_success "✅ Deployment successful! Services are healthy"
            echo ""
            echo -e "${CYAN}Production URLs:${NC}"
            echo "  Web:    https://$REMOTE_DOMAIN"
            echo "  API:    https://$REMOTE_DOMAIN/api/health"
            echo "  Docs:   https://$REMOTE_DOMAIN/api/openapi"
            return 0
        fi

        print_status "Waiting for services to be ready (attempt $attempt/$max_attempts)..."
        sleep 3
        attempt=$((attempt + 1))
    done

    print_error "❌ Deployment verification failed - API not responding after $max_attempts attempts"
    print_status "Check logs with: $0 logs api"
    return 1
}

# Restart production services
restart_services() {
    print_header "Restarting Production Services"

    ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose restart"

    print_success "Services restarted"
    sleep 3
    show_status
}

# Stop production services
stop_services() {
    print_header "Stopping Production Services"

    ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose stop"

    print_success "Services stopped"
}

# Start production services
start_services() {
    print_header "Starting Production Services"

    ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose up -d"

    print_success "Services started"
    sleep 3
    show_status
}

# Show service status
show_status() {
    print_header "Production Service Status"

    ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose ps"
}

# Show logs
show_logs() {
    local service="${1:-api}"

    print_header "Production Logs: $service"

    case "$service" in
        api)
            ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose logs --tail=50 api"
            ;;
        web)
            ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose logs --tail=50 web"
            ;;
        *)
            ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose logs --tail=50"
            ;;
    esac
}

# Check health
check_health() {
    print_header "Health Check"

    # Check API
    print_status "Checking API health..."
    if curl -f -s "https://$REMOTE_DOMAIN/api/health" | jq . >/dev/null 2>&1; then
        echo -e "${GREEN}✓ API${NC} - Healthy (https://$REMOTE_DOMAIN/api/health)"
    else
        echo -e "${RED}✗ API${NC} - Not responding"
    fi

    # Check web
    print_status "Checking web UI..."
    if curl -f -s -I "https://$REMOTE_DOMAIN/" | head -1 | grep -q "200\|301\|302"; then
        echo -e "${GREEN}✓ Web UI${NC} - Healthy (https://$REMOTE_DOMAIN/)"
    else
        echo -e "${RED}✗ Web UI${NC} - Not responding"
    fi

    # Check database via SSH
    print_status "Checking database..."
    if ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose exec -T api sh -c 'wget -q -O- http://localhost:8080/api/health'" | grep -q "ok"; then
        echo -e "${GREEN}✓ Database${NC} - Accessible from API"
    else
        echo -e "${YELLOW}⚠ Database${NC} - Unable to verify"
    fi
}

# Run API tests
test_api() {
    print_header "Running API Tests"

    cd api
    go test -v -cover ./... | tee /tmp/sprintspark-api-test.log
    local exit_code=${PIPESTATUS[0]}
    cd ..

    if [ $exit_code -eq 0 ]; then
        print_success "API tests passed"
    else
        print_error "API tests failed"
        return 1
    fi
}

# Run frontend tests
test_web() {
    print_header "Running Frontend Tests"

    cd web
    npm test 2>&1 | tee /tmp/sprintspark-web-test.log || {
        print_warning "Frontend tests not configured or failed"
        cd ..
        return 0
    }
    cd ..

    print_success "Frontend tests passed"
}

# Run E2E tests
test_e2e() {
    print_header "Running Playwright E2E Tests"

    cd web
    npx playwright test 2>&1 | tee /tmp/sprintspark-e2e-test.log
    local exit_code=${PIPESTATUS[0]}
    cd ..

    if [ $exit_code -eq 0 ]; then
        print_success "E2E tests passed"
    else
        print_error "E2E tests failed"
        return 1
    fi
}

# Run all tests and show summary
run_all_tests() {
    print_header "Running All Tests"

    local api_result=0
    local web_result=0
    local e2e_result=0

    # Run API tests
    test_api || api_result=1
    echo ""

    # Run web tests
    test_web || web_result=1
    echo ""

    # Run E2E tests
    test_e2e || e2e_result=1
    echo ""

    # Show coverage
    print_header "Test Coverage"

    if [ -f /tmp/sprintspark-api-test.log ]; then
        echo -e "${CYAN}API Coverage:${NC}"
        grep "coverage:" /tmp/sprintspark-api-test.log | tail -1 || echo "  No coverage data"
    fi

    # Summary
    print_header "Test Summary"

    if [ $api_result -eq 0 ]; then
        echo -e "${GREEN}✅ API Tests${NC} - Passed"
    else
        echo -e "${RED}❌ API Tests${NC} - Failed"
    fi

    if [ $web_result -eq 0 ]; then
        echo -e "${GREEN}✅ Frontend Tests${NC} - Passed"
    else
        echo -e "${YELLOW}⚠️  Frontend Tests${NC} - Skipped or Failed"
    fi

    if [ $e2e_result -eq 0 ]; then
        echo -e "${GREEN}✅ E2E Tests${NC} - Passed"
    else
        echo -e "${RED}❌ E2E Tests${NC} - Failed"
    fi

    if [ $api_result -eq 0 ] && [ $e2e_result -eq 0 ]; then
        echo ""
        print_success "✅ All critical tests passed!"
        return 0
    else
        echo ""
        print_error "❌ Some tests failed"
        return 1
    fi
}

# Validate OpenAPI spec
validate_openapi() {
    print_header "Validating OpenAPI Specification"

    if ! command -v openapi-generator-cli >/dev/null 2>&1; then
        print_warning "openapi-generator-cli not found, using simple validation"

        if [ -f api/openapi.yaml ]; then
            if grep -q "openapi: 3" api/openapi.yaml; then
                print_success "OpenAPI spec appears valid"
            else
                print_error "OpenAPI spec may be invalid"
                return 1
            fi
        else
            print_error "OpenAPI spec not found at api/openapi.yaml"
            return 1
        fi
    else
        openapi-generator-cli validate -i api/openapi.yaml
    fi
}

# Execute database query on production
execute_db_query() {
    local query="$1"

    if [ -z "$query" ]; then
        print_error "Usage: $0 db-query \"SQL_QUERY\""
        return 1
    fi

    print_header "Production Database Query"
    echo -e "${CYAN}Server:${NC} $REMOTE_SERVER"
    echo -e "${CYAN}Query:${NC} $query"
    echo ""

    # Verify SSH connectivity
    if ! ssh -o ConnectTimeout=10 "$REMOTE_SERVER" "echo ok" >/dev/null 2>&1; then
        print_error "Cannot connect to $REMOTE_SERVER"
        return 1
    fi

    # Execute query via docker exec as root (to install sqlite3 if needed)
    ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose exec -T -u root api sh -c '
        if ! command -v sqlite3 >/dev/null 2>&1; then
            apk add --no-cache sqlite >/dev/null 2>&1
        fi
        sqlite3 -header -column /data/sprintspark.db \"$query\"
    '"
}

# Admin management - create admin user
admin_create() {
    local email="$1"
    local env="${2:-remote}"  # default to remote

    if [ -z "$email" ]; then
        print_error "Usage: $0 admin create <email>"
        return 1
    fi

    print_header "Creating Admin User"
    echo -e "${CYAN}Email:${NC} $email"
    echo -e "${CYAN}Environment:${NC} $env"
    echo ""

    if [ "$env" = "remote" ]; then
        local result=$(ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose exec -T -u root api sh -c '
            if ! command -v sqlite3 >/dev/null 2>&1; then
                apk add --no-cache sqlite >/dev/null 2>&1
            fi
            sqlite3 -header -column /data/sprintspark.db \"UPDATE users SET is_admin = 1 WHERE email = '\''$email'\''; SELECT id, email, is_admin FROM users WHERE email = '\''$email'\''\"
        '")
        echo "$result"

        if echo "$result" | grep -q "$email"; then
            echo ""
            print_success "Admin privileges granted to $email"
        else
            echo ""
            print_error "User $email not found in database. Create the user account first."
            return 1
        fi
    else
        # Local Docker database
        if ! docker-compose ps | grep -q "api.*Up"; then
            print_error "Local API container is not running. Start with: $0 local:start"
            return 1
        fi

        local result=$(docker-compose exec -T -u root api sh -c "
            if ! command -v sqlite3 >/dev/null 2>&1; then
                apk add --no-cache sqlite >/dev/null 2>&1
            fi
            sqlite3 -header -column /data/sprintspark.db \"UPDATE users SET is_admin = 1 WHERE email = '$email'; SELECT id, email, is_admin FROM users WHERE email = '$email';\"
        ")
        echo "$result"

        if echo "$result" | grep -q "$email"; then
            echo ""
            print_success "Admin privileges granted to $email"
        else
            echo ""
            print_error "User $email not found in database. Create the user account first."
            return 1
        fi
    fi
}

# Admin management - list admins
admin_list() {
    local env="${1:-remote}"

    print_header "Admin Users"
    echo -e "${CYAN}Environment:${NC} $env"
    echo ""

    local query="SELECT id, email, created_at FROM users WHERE is_admin = 1 ORDER BY created_at DESC;"

    if [ "$env" = "remote" ]; then
        ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose exec -T -u root api sh -c '
            if ! command -v sqlite3 >/dev/null 2>&1; then
                apk add --no-cache sqlite >/dev/null 2>&1
            fi
            sqlite3 -header -column /data/sprintspark.db \"$query\"
        '"
    else
        if ! docker-compose ps | grep -q "api.*Up"; then
            print_error "Local API container is not running. Start with: $0 local:start"
            return 1
        fi

        docker-compose exec -T -u root api sh -c "
            if ! command -v sqlite3 >/dev/null 2>&1; then
                apk add --no-cache sqlite >/dev/null 2>&1
            fi
            sqlite3 -header -column /data/sprintspark.db \"$query\"
        "
    fi
}

# Admin management - revoke admin
admin_revoke() {
    local email="$1"
    local env="${2:-remote}"

    if [ -z "$email" ]; then
        print_error "Usage: $0 admin revoke <email>"
        return 1
    fi

    print_header "Revoking Admin Privileges"
    echo -e "${CYAN}Email:${NC} $email"
    echo -e "${CYAN}Environment:${NC} $env"
    echo ""

    if [ "$env" = "remote" ]; then
        local result=$(ssh "$REMOTE_SERVER" "cd '$REMOTE_DEPLOY_PATH' && docker-compose exec -T -u root api sh -c '
            if ! command -v sqlite3 >/dev/null 2>&1; then
                apk add --no-cache sqlite >/dev/null 2>&1
            fi
            sqlite3 -header -column /data/sprintspark.db \"UPDATE users SET is_admin = 0 WHERE email = '\''$email'\''; SELECT id, email, is_admin FROM users WHERE email = '\''$email'\''\"
        '")
        echo "$result"

        if echo "$result" | grep -q "$email"; then
            echo ""
            print_success "Admin privileges revoked from $email"
        else
            echo ""
            print_error "User $email not found in database"
            return 1
        fi
    else
        if ! docker-compose ps | grep -q "api.*Up"; then
            print_error "Local API container is not running. Start with: $0 local:start"
            return 1
        fi

        local result=$(docker-compose exec -T -u root api sh -c "
            if ! command -v sqlite3 >/dev/null 2>&1; then
                apk add --no-cache sqlite >/dev/null 2>&1
            fi
            sqlite3 -header -column /data/sprintspark.db \"UPDATE users SET is_admin = 0 WHERE email = '$email'; SELECT id, email, is_admin FROM users WHERE email = '$email';\"
        ")
        echo "$result"

        if echo "$result" | grep -q "$email"; then
            echo ""
            print_success "Admin privileges revoked from $email"
        else
            echo ""
            print_error "User $email not found in database"
            return 1
        fi
    fi
}

# Local development server commands
local_start() {
    print_header "Starting Local Development Server"

    # Check if Docker is running
    if ! docker info >/dev/null 2>&1; then
        print_error "Docker is not running. Please start Docker Desktop first."
        return 1
    fi

    # Check if services are already running
    if docker-compose ps | grep -q "Up"; then
        print_warning "Services are already running"
        docker-compose ps
        return 0
    fi

    print_status "Building and starting services..."
    docker-compose up -d --build

    print_status "Waiting for services to be ready..."
    sleep 5

    # Check health
    local attempts=0
    local max_attempts=10

    while [ $attempts -lt $max_attempts ]; do
        if curl -f -s http://localhost:$LOCAL_API_PORT/api/health >/dev/null 2>&1; then
            print_success "✅ Local server started successfully!"
            echo ""
            echo -e "${CYAN}Local URLs:${NC}"
            echo "  Web:    http://localhost:$LOCAL_WEB_PORT"
            echo "  API:    http://localhost:$LOCAL_API_PORT/api/health"
            echo "  Docs:   http://localhost:$LOCAL_API_PORT/api/openapi"
            echo ""
            print_status "View logs: $0 local:logs"
            return 0
        fi

        attempts=$((attempts + 1))
        sleep 2
    done

    print_error "Services started but not responding. Check logs with: $0 local:logs"
    docker-compose ps
    return 1
}

local_stop() {
    print_header "Stopping Local Development Server"

    if ! docker-compose ps | grep -q "Up"; then
        print_warning "No services are running"
        return 0
    fi

    docker-compose stop
    print_success "Local services stopped"
}

local_restart() {
    print_header "Restarting Local Development Server"

    docker-compose restart

    print_success "Services restarted"
    sleep 3
    local_status
}

local_status() {
    print_header "Local Service Status"

    if ! docker info >/dev/null 2>&1; then
        print_error "Docker is not running"
        return 1
    fi

    docker-compose ps
}

local_logs() {
    local service="${1:-}"

    print_header "Local Logs${service:+: $service}"

    if [ -z "$service" ]; then
        docker-compose logs --tail=50 -f
    else
        docker-compose logs --tail=50 -f "$service"
    fi
}

local_clean() {
    print_header "Cleaning Local Environment"

    print_warning "This will remove all containers, volumes, and data"
    read -p "Are you sure? (y/N) " -n 1 -r
    echo

    if [[ $REPLY =~ ^[Yy]$ ]]; then
        docker-compose down -v
        print_success "Local environment cleaned"
    else
        print_status "Operation cancelled"
    fi
}

# Main command handler
case ${1:-help} in
    local:start)
        local_start
        ;;
    local:stop)
        local_stop
        ;;
    local:restart)
        local_restart
        ;;
    local:status)
        local_status
        ;;
    local:logs)
        local_logs "$2"
        ;;
    local:clean)
        local_clean
        ;;
    deploy)
        shift
        deploy_to_production "$*"
        ;;
    restart)
        restart_services
        ;;
    stop)
        stop_services
        ;;
    start)
        start_services
        ;;
    status)
        show_status
        ;;
    logs)
        show_logs "$2"
        ;;
    health)
        check_health
        ;;
    test)
        run_all_tests
        ;;
    test-api)
        test_api
        ;;
    test-web)
        test_web
        ;;
    test-e2e)
        test_e2e
        ;;
    validate-openapi)
        validate_openapi
        ;;
    db-query)
        execute_db_query "$2"
        ;;
    admin)
        case "$2" in
            create)
                admin_create "$3" "remote"
                ;;
            list)
                admin_list "remote"
                ;;
            revoke)
                admin_revoke "$3" "remote"
                ;;
            *)
                print_error "Unknown admin command: $2"
                echo "Available: create <email>, list, revoke <email>"
                exit 1
                ;;
        esac
        ;;
    local)
        case "$2" in
            admin)
                case "$3" in
                    create)
                        admin_create "$4" "local"
                        ;;
                    list)
                        admin_list "local"
                        ;;
                    revoke)
                        admin_revoke "$4" "local"
                        ;;
                    *)
                        print_error "Unknown local admin command: $3"
                        echo "Available: create <email>, list, revoke <email>"
                        exit 1
                        ;;
                esac
                ;;
            *)
                print_error "Unknown local command: $2"
                exit 1
                ;;
        esac
        ;;
    remote)
        case "$2" in
            admin)
                case "$3" in
                    create)
                        admin_create "$4" "remote"
                        ;;
                    list)
                        admin_list "remote"
                        ;;
                    revoke)
                        admin_revoke "$4" "remote"
                        ;;
                    *)
                        print_error "Unknown remote admin command: $3"
                        echo "Available: create <email>, list, revoke <email>"
                        exit 1
                        ;;
                esac
                ;;
            *)
                print_error "Unknown remote command: $2"
                exit 1
                ;;
        esac
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        print_error "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac
